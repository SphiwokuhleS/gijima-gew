// <auto-generated />
using System;
using Gijima.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gijima.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241116220423_SeedUserData")]
    partial class SeedUserData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("gijima")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gijima.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "gijima");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d4767d0-56f5-4a5d-be87-70a2be3aaaf1",
                            Email = "amahle.nkosi@sonke.co.za",
                            EmailConfirmed = true,
                            FirstName = "Amahle",
                            LastName = "Nkosi",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMAHLE.NKOSI@SONKE.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEOCEFsD0F9AhPdZMQoUMVi85c54YHXUSrcjKE+Go47VLL+qKwYfZywpRQeVfNbCe9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30a671ac-5f83-4072-831d-c040fb469b4b",
                            TwoFactorEnabled = false,
                            UserName = "Amahle_Nkosi"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2a70673-687c-4006-9bf0-fb3a07732ce4",
                            Email = "sihle.mabena@sonke.co.za",
                            EmailConfirmed = true,
                            FirstName = "Sihle",
                            LastName = "Mabena",
                            LockoutEnabled = false,
                            NormalizedEmail = "SIHLE.MABENA@SONKE.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMbDZj+gT8YST+j8JFY+7S2+L+T/qp/wWkyyU1B2/e4NvsS30NvSyfhO0NgUQrzs+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b74fca1a-3c7f-4318-a5a6-056dd3ce0c6c",
                            TwoFactorEnabled = false,
                            UserName = "Sihle_Mabena"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11d2184d-b740-4b07-95a5-93961faeb75b",
                            Email = "zandile.zulu@sonke.co.za",
                            EmailConfirmed = true,
                            FirstName = "Zandile",
                            LastName = "Zulu",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZANDILE.ZULU@SONKE.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEBPoloabdJuX2tRW0ESo5W7wmDy1cyFl6ECpYVcHQN5m8wxLVFcqXuhTdTnq++NvrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0e50cac-9b2c-4378-9de7-4a6a9ffdd2bf",
                            TwoFactorEnabled = false,
                            UserName = "Zandile_Zulu"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddced065-c83c-4ffb-9e91-7bf5c344c915",
                            Email = "lihle.ngcobo@sonke.co.za",
                            EmailConfirmed = true,
                            FirstName = "Lihle",
                            LastName = "Ngcobo",
                            LockoutEnabled = false,
                            NormalizedEmail = "LIHLE.NGCOBO@SONKE.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEOvl5uIOzUiybKh3upPKNbum+iUGmdsDoyAP7exSMr09zcxN3MizuySONJr3oLmlVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1462c9fb-6c6e-4abf-bf6f-a01745e78526",
                            TwoFactorEnabled = false,
                            UserName = "Lihle_Ngcobo"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "334b2e9a-867d-4406-8eb7-05308254b9f8",
                            Email = "noluthando.mkhize@sonke.co.za",
                            EmailConfirmed = true,
                            FirstName = "Noluthando",
                            LastName = "Mkhize",
                            LockoutEnabled = false,
                            NormalizedEmail = "NOLUTHANDO.MKHIZE@SONKE.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEOyvs1r/N6D8zAIVNRnsoyKSdGYMrj2sIjTSw1/yXTCElgtQkA9dl4oCtbxOq+5+zg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d08c43d-3179-4d92-998b-02bdcc0724a0",
                            TwoFactorEnabled = false,
                            UserName = "Noluthando_Mkhize"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b859464-57c3-4c13-adc9-1018ade33d03",
                            Email = "sipho.dlomo@sonke.co.za",
                            EmailConfirmed = true,
                            FirstName = "Sipho",
                            LastName = "Dlomo",
                            LockoutEnabled = false,
                            NormalizedEmail = "SIPHO.DLOMO@SONKE.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEGZGfP3HUWNK6jNvZlFF1EQJXfp6wgVNCrNtnhf5P6K4wHGVUo6RO45RlItDFLbVHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "accfb287-971a-4a48-8e1f-4a35d2f611bb",
                            TwoFactorEnabled = false,
                            UserName = "Sipho_Dlomo"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2cf0b1f2-bf32-4075-9422-57740485c76c",
                            Email = "thando.ntuli@sonke.co.za",
                            EmailConfirmed = true,
                            FirstName = "Thando",
                            LastName = "Ntuli",
                            LockoutEnabled = false,
                            NormalizedEmail = "THANDO.NTULI@SONKE.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEIhzPW/1EZBpxXRKoJBA8qSvM9DzWClzXWI1UcNJ41NOYtF9zWzZc1IF+jbISJbiOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fbf7c31b-9c32-4c19-b510-f49d9aacf309",
                            TwoFactorEnabled = false,
                            UserName = "Thando_Ntuli"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cca8d1a9-b89f-4a54-a2fd-7abc0c2df53f",
                            Email = "thembeka.maduna@sonke.co.za",
                            EmailConfirmed = true,
                            FirstName = "Thembeka",
                            LastName = "Maduna",
                            LockoutEnabled = false,
                            NormalizedEmail = "THEMBEKA.MADUNA@SONKE.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDp9kdb5UqsVjvAczstROIsiG25ewSqK6wL9CLa7LP0xerwpXvp7CEuciublDZo1tg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05281513-88a5-498c-b358-36a32d338dbb",
                            TwoFactorEnabled = false,
                            UserName = "Thembeka_Maduna"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42f4164f-e473-4024-8310-97dc2504a6d4",
                            Email = "anele.khumalo@sonke.co.za",
                            EmailConfirmed = true,
                            FirstName = "Anele",
                            LastName = "Khumalo",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANELE.KHUMALO@SONKE.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEC+19HTTVblAAatApR1fQx29OP6bLZfptmVWbuCZB/4zPCVadWQX0LqemeX5CfSx0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6dc94e96-33be-4ade-82bb-f78655594677",
                            TwoFactorEnabled = false,
                            UserName = "Anele_Khumalo"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3b0d818-8184-4da6-9cab-a6353f3f92e4",
                            Email = "buhle.ndlovu@sonke.co.za",
                            EmailConfirmed = true,
                            FirstName = "Buhle",
                            LastName = "Ndlovu",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUHLE.NDLOVU@SONKE.CO.ZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuSNW3uHSKsV2QlM/pEvGCtw7EgKHgqIxhWIASHFFZwZjW11+BTgrH+UEVdLrqoCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f58c3e26-caf1-485a-9d14-0e01f6451a2f",
                            TwoFactorEnabled = false,
                            UserName = "Buhle_Ndlovu"
                        });
                });

            modelBuilder.Entity("Gijima.Data.DataModels.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Postcode")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Area", "gijima");
                });

            modelBuilder.Entity("Gijima.Data.DataModels.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("AreaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs", "gijima");
                });

            modelBuilder.Entity("Gijima.Data.DataModels.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("JobId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("Offer", "gijima");
                });

            modelBuilder.Entity("Gijima.Data.DataModels.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GivenByUserId")
                        .HasColumnType("text");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("ReceivedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GivenByUserId");

                    b.HasIndex("ReceivedByUserId");

                    b.ToTable("Review", "gijima");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "gijima");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "gijima");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "gijima");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "gijima");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "gijima");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "gijima");
                });

            modelBuilder.Entity("Gijima.Data.DataModels.Area", b =>
                {
                    b.HasOne("Gijima.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gijima.Data.DataModels.Job", b =>
                {
                    b.HasOne("Gijima.Data.DataModels.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gijima.Data.ApplicationUser", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.HasOne("Gijima.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gijima.Data.DataModels.Offer", b =>
                {
                    b.HasOne("Gijima.Data.DataModels.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId");

                    b.HasOne("Gijima.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gijima.Data.DataModels.Reviews", b =>
                {
                    b.HasOne("Gijima.Data.ApplicationUser", "GivenByUser")
                        .WithMany()
                        .HasForeignKey("GivenByUserId");

                    b.HasOne("Gijima.Data.ApplicationUser", "ReceivedByUser")
                        .WithMany()
                        .HasForeignKey("ReceivedByUserId");

                    b.Navigation("GivenByUser");

                    b.Navigation("ReceivedByUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Gijima.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Gijima.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gijima.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Gijima.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
